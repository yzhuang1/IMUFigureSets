2025-09-16 01:01:17,720 - INFO - __main__ - Logging system initialized successfully
2025-09-16 01:01:17,723 - INFO - __main__ - Found 5 data files: ['mitdb_ecg_sample.csv', 'y.npy', 'X.npy', 'mitdb_ecg_data.npz', 'mitdb_metadata.json']
2025-09-16 01:01:17,723 - INFO - __main__ - Found NPY files, prioritizing them over CSV
2025-09-16 01:01:17,723 - INFO - __main__ - Attempting to load: y.npy
2025-09-16 01:01:17,724 - INFO - __main__ - Attempting to load: X.npy
2025-09-16 01:01:18,026 - INFO - __main__ - Successfully loaded NPY data: X(62352, 1000, 2), y(62352,)
2025-09-16 01:01:18,347 - INFO - __main__ - Starting AI-enhanced data processing with new pipeline flow...
2025-09-16 01:01:18,347 - INFO - __main__ - Starting AI-enhanced training with new pipeline flow
2025-09-16 01:01:18,347 - INFO - __main__ - Flow: Template Selection → BO → Evaluation → Feedback Loop
2025-09-16 01:01:18,360 - INFO - __main__ - Data profile: {'data_type': 'numpy_array', 'shape': (62352, 1000, 2), 'dtype': 'float32', 'feature_count': 2, 'sample_count': 62352, 'is_sequence': True, 'is_image': False, 'is_tabular': False, 'has_labels': True, 'label_count': 5, 'sequence_lengths': None, 'channels': None, 'height': None, 'width': None, 'metadata': {}}
2025-09-16 01:01:18,361 - INFO - evaluation.code_generation_pipeline_orchestrator - Code generation pipeline orchestrator initialized with max 4 attempts
2025-09-16 01:01:18,361 - INFO - evaluation.code_generation_pipeline_orchestrator - Starting code generation pipeline execution
2025-09-16 01:01:18,361 - INFO - evaluation.code_generation_pipeline_orchestrator - Flow: AI Code Generation → JSON Storage → BO → Training Execution → Evaluation
2025-09-16 01:01:18,361 - INFO - evaluation.code_generation_pipeline_orchestrator - Creating centralized data splits to prevent data leakage
2025-09-16 01:01:18,361 - INFO - data_splitting - Creating centralized data splits with test_size=0.2, val_size=0.2
2025-09-16 01:01:18,362 - INFO - data_splitting - Input data shape: X=(62352, 1000, 2), y=(62352,)
2025-09-16 01:01:18,363 - INFO - data_splitting - Class distribution: [44897  9551  1201  1239  5464]
2025-09-16 01:01:19,004 - INFO - data_splitting - Computed class weights: {np.int64(0): np.float64(0.27775728256708315), np.int64(1): np.float64(1.3057591623036648), np.int64(2): np.float64(10.37815344603381), np.int64(3): np.float64(10.0640605296343), np.int64(4): np.float64(2.282184729768373)}
2025-09-16 01:01:19,005 - INFO - class_balancing - Class imbalance analysis:
2025-09-16 01:01:19,005 - INFO - class_balancing -   Strategy: severe_imbalance
2025-09-16 01:01:19,005 - INFO - class_balancing -   Imbalance ratio: 37.36
2025-09-16 01:01:19,005 - INFO - class_balancing -   Recommendations: Use weighted loss + weighted sampling, Consider Focal Loss, Evaluate with balanced metrics
2025-09-16 01:01:19,005 - INFO - data_splitting - Final splits - Train: 39904, Val: 9977, Test: 12471
2025-09-16 01:01:19,006 - INFO - data_splitting - Train class distribution: [28733  6112   769   793  3497]
2025-09-16 01:01:19,006 - INFO - data_splitting - Val class distribution: [7184 1529  192  198  874]
2025-09-16 01:01:19,007 - INFO - data_splitting - Test class distribution: [8980 1910  240  248 1093]
2025-09-16 01:01:19,007 - INFO - data_splitting - Recommended balancing strategy: severe_imbalance
2025-09-16 01:01:20,337 - INFO - data_splitting - Computed standardization stats - mean shape: torch.Size([1, 2]), std shape: torch.Size([1, 2])
2025-09-16 01:01:20,340 - INFO - evaluation.code_generation_pipeline_orchestrator - Computed standardization statistics from training data only
2025-09-16 01:01:20,342 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 01:01:20,343 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE ATTEMPT 1/4
2025-09-16 01:01:20,343 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 01:01:20,343 - INFO - evaluation.code_generation_pipeline_orchestrator - 🤖 STEP 1: AI Training Code Generation
2025-09-16 01:01:20,343 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 01:04:00,898 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:04:01,123 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 01:04:01,123 - INFO - models.ai_code_generator - Prompt length: 5157 characters
2025-09-16 01:04:01,123 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 01:04:01,124 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 01:04:01,124 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 01:04:01,124 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 01:04:59,691 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:04:59,694 - INFO - models.ai_code_generator - API call completed successfully
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Response type: <class 'openai.types.responses.response.Response'>
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Response attributes: ['__abstractmethods__', '__annotations__', '__class__', '__class_getitem__', '__class_vars__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__fields__', '__fields_set__', '__format__', '__ge__', '__get_pydantic_core_schema__', '__get_pydantic_json_schema__', '__getattr__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pretty__', '__private_attributes__', '__pydantic_complete__', '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__', '__pydantic_decorators__', '__pydantic_extra__', '__pydantic_fields__', '__pydantic_fields_set__', '__pydantic_generic_metadata__', '__pydantic_init_subclass__', '__pydantic_parent_namespace__', '__pydantic_post_init__', '__pydantic_private__', '__pydantic_root_model__', '__pydantic_serializer__', '__pydantic_setattr_handlers__', '__pydantic_validator__', '__reduce__', '__reduce_ex__', '__replace__', '__repr__', '__repr_args__', '__repr_name__', '__repr_recursion__', '__repr_str__', '__rich_repr__', '__setattr__', '__setstate__', '__signature__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_calculate_keys', '_copy_and_set_values', '_get_value', '_iter', '_request_id', '_setattr_handler', 'background', 'construct', 'conversation', 'copy', 'created_at', 'dict', 'error', 'from_orm', 'id', 'incomplete_details', 'instructions', 'json', 'max_output_tokens', 'max_tool_calls', 'metadata', 'model', 'model_computed_fields', 'model_config', 'model_construct', 'model_copy', 'model_dump', 'model_dump_json', 'model_extra', 'model_fields', 'model_fields_set', 'model_json_schema', 'model_parametrized_name', 'model_post_init', 'model_rebuild', 'model_validate', 'model_validate_json', 'model_validate_strings', 'object', 'output', 'output_text', 'parallel_tool_calls', 'parse_file', 'parse_obj', 'parse_raw', 'previous_response_id', 'prompt', 'prompt_cache_key', 'reasoning', 'safety_identifier', 'schema', 'schema_json', 'service_tier', 'status', 'temperature', 'text', 'to_dict', 'to_json', 'tool_choice', 'tools', 'top_logprobs', 'top_p', 'truncation', 'update_forward_refs', 'usage', 'user', 'validate']
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Using response.output_text
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Extracted result length: 11150 characters
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Result preview: {
    "model_name": "ECG-TCN-SE-Light",
    "training_code": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import TensorDataset, DataLoader\n\nclass Sque...
2025-09-16 01:04:59,695 - INFO - models.ai_code_generator - Successfully extracted response content
2025-09-16 01:04:59,696 - INFO - models.ai_code_generator - AI generated training function: ECG-TCN-SE-Light
2025-09-16 01:04:59,696 - INFO - models.ai_code_generator - Confidence: 0.90
2025-09-16 01:04:59,696 - INFO - models.ai_code_generator - Reasoning: The model is a compact Conv-TCN with dilated depthwise-separable convolutions and Squeeze-and-Excitation, aligning with recent ECG literature that favors CNN/TCN backbones for local morphology plus longer temporal context on ~1000-sample segments. We include class-weighted cross-entropy (to mitigate S/F rarity) and label smoothing; AMP and gradient clipping improve stability/throughput. The network is lightweight (<256K params by default), suitable for fair AAMI 5-class evaluation and inter-patient splits (e.g., de Chazal DS1/DS2).
2025-09-16 01:04:59,696 - INFO - models.ai_code_generator - Literature review informed code generation (confidence: 0.78)
2025-09-16 01:04:59,696 - INFO - evaluation.code_generation_pipeline_orchestrator - Generated training function: ECG-TCN-SE-Light
2025-09-16 01:04:59,696 - INFO - evaluation.code_generation_pipeline_orchestrator - Reasoning: The model is a compact Conv-TCN with dilated depthwise-separable convolutions and Squeeze-and-Excitation, aligning with recent ECG literature that favors CNN/TCN backbones for local morphology plus longer temporal context on ~1000-sample segments. We include class-weighted cross-entropy (to mitigate S/F rarity) and label smoothing; AMP and gradient clipping improve stability/throughput. The network is lightweight (<256K params by default), suitable for fair AAMI 5-class evaluation and inter-patient splits (e.g., de Chazal DS1/DS2).
2025-09-16 01:04:59,696 - INFO - evaluation.code_generation_pipeline_orchestrator - BO parameters: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 01:04:59,696 - INFO - evaluation.code_generation_pipeline_orchestrator - Confidence: 0.90
2025-09-16 01:04:59,697 - INFO - evaluation.code_generation_pipeline_orchestrator - 💾 STEP 2: Save Training Function to JSON
2025-09-16 01:04:59,698 - INFO - models.ai_code_generator - Training function saved to: generated_training_functions/training_function_numpy_array_ECG-TCN-SE-Light_1757984699.json
2025-09-16 01:04:59,698 - INFO - evaluation.code_generation_pipeline_orchestrator - Training function saved to: generated_training_functions/training_function_numpy_array_ECG-TCN-SE-Light_1757984699.json
2025-09-16 01:04:59,704 - INFO - models.training_function_executor - Training function validation passed
2025-09-16 01:04:59,705 - INFO - evaluation.code_generation_pipeline_orchestrator - 🔍 STEP 3: Bayesian Optimization
2025-09-16 01:04:59,705 - INFO - evaluation.code_generation_pipeline_orchestrator - Running BO for generated training function: ECG-TCN-SE-Light
2025-09-16 01:04:59,745 - INFO - evaluation.code_generation_pipeline_orchestrator - BO dataset size: 5000 samples
2025-09-16 01:04:59,745 - INFO - evaluation.code_generation_pipeline_orchestrator - BO will optimize: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 01:04:59,746 - INFO - models.training_function_executor - GPU available: NVIDIA H100 NVL
2025-09-16 01:04:59,746 - WARNING - models.training_function_executor - Using provided subset instead of centralized splits - this may cause data leakage
2025-09-16 01:05:00,341 - INFO - bo.run_bo - Using default search space
2025-09-16 01:05:00,343 - INFO - bo.run_bo - Initialized Random Forest Bayesian Optimizer
2025-09-16 01:05:00,353 - INFO - bo.run_bo - Using explicitly provided search space
2025-09-16 01:05:00,354 - INFO - bo.run_bo - Initialized Random Forest Bayesian Optimizer
2025-09-16 01:05:00,357 - INFO - bo.run_bo - BO Trial 1: Initial random exploration
2025-09-16 01:05:00,357 - INFO - bo.run_bo - [PROFILE] suggest() took 0.002s
2025-09-16 01:05:00,357 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:00,358 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:00,358 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': 10, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 01:05:00,365 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.01535224694197351, 'epochs': 10, 'batch_size': 16, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 01:05:00,388 - ERROR - models.training_function_executor - Training execution failed: Model has 277774 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:00,388 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:00,388 - ERROR - models.training_function_executor - BO training objective failed: Model has 277774 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:00,389 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.032s
2025-09-16 01:05:00,389 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:00,389 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.000s
2025-09-16 01:05:00,390 - INFO - bo.run_bo - Recorded observation #1: hparams={'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093}, value=0.0000
2025-09-16 01:05:00,390 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 1: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093} -> 0.0000
2025-09-16 01:05:00,391 - INFO - bo.run_bo - BO Trial 2: Initial random exploration
2025-09-16 01:05:00,391 - INFO - bo.run_bo - [PROFILE] suggest() took 0.002s
2025-09-16 01:05:00,392 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:00,392 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:00,392 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': 13, 'hidden_size': 103, 'dropout': 0.2335960277973153}
2025-09-16 01:05:00,397 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006071989493441302, 'epochs': 13, 'batch_size': 8, 'hidden_size': 103, 'dropout': 0.2335960277973153}
2025-09-16 01:05:02,960 - ERROR - models.training_function_executor - Training execution failed: 'str' object has no attribute 'type'
2025-09-16 01:05:02,960 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:02,961 - ERROR - models.training_function_executor - BO training objective failed: 'str' object has no attribute 'type'
2025-09-16 01:05:02,961 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 2.569s
2025-09-16 01:05:02,963 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:02,963 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.001s
2025-09-16 01:05:02,963 - INFO - bo.run_bo - Recorded observation #2: hparams={'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': np.int64(13), 'hidden_size': np.int64(103), 'dropout': 0.2335960277973153}, value=0.0000
2025-09-16 01:05:02,963 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 2: {'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': np.int64(13), 'hidden_size': np.int64(103), 'dropout': 0.2335960277973153} -> 0.0000
2025-09-16 01:05:02,967 - INFO - bo.run_bo - BO Trial 3: Initial random exploration
2025-09-16 01:05:02,967 - INFO - bo.run_bo - [PROFILE] suggest() took 0.003s
2025-09-16 01:05:02,967 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:02,967 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:02,967 - INFO - models.training_function_executor - Hyperparameters: {'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': 23, 'hidden_size': 273, 'dropout': 0.5053991405867774}
2025-09-16 01:05:02,975 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 3.727925903376984e-05, 'epochs': 23, 'batch_size': 64, 'hidden_size': 273, 'dropout': 0.5053991405867774}
2025-09-16 01:05:03,010 - ERROR - models.training_function_executor - Training execution failed: Model has 490483 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:03,010 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:03,010 - ERROR - models.training_function_executor - BO training objective failed: Model has 490483 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:03,010 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.043s
2025-09-16 01:05:03,407 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:03,407 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.397s
2025-09-16 01:05:03,407 - INFO - bo.run_bo - Recorded observation #3: hparams={'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': np.int64(23), 'hidden_size': np.int64(273), 'dropout': 0.5053991405867774}, value=0.0000
2025-09-16 01:05:03,408 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 3: {'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': np.int64(23), 'hidden_size': np.int64(273), 'dropout': 0.5053991405867774} -> 0.0000
2025-09-16 01:05:03,408 - INFO - bo.run_bo - BO Trial 4: Using RF surrogate + Expected Improvement
2025-09-16 01:05:03,408 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:03,408 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:03,408 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:03,409 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.05678201970293135, 'batch_size': 32, 'epochs': 5, 'hidden_size': 183, 'dropout': 0.08439771317838103}
2025-09-16 01:05:03,415 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.05678201970293135, 'epochs': 5, 'batch_size': 32, 'hidden_size': 183, 'dropout': 0.08439771317838103}
2025-09-16 01:05:03,435 - ERROR - models.training_function_executor - Training execution failed: 'str' object has no attribute 'type'
2025-09-16 01:05:03,435 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:03,435 - ERROR - models.training_function_executor - BO training objective failed: 'str' object has no attribute 'type'
2025-09-16 01:05:03,435 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.027s
2025-09-16 01:05:03,830 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:03,830 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.394s
2025-09-16 01:05:03,830 - INFO - bo.run_bo - Recorded observation #4: hparams={'lr': 0.05678201970293135, 'batch_size': np.int64(32), 'epochs': np.int64(5), 'hidden_size': np.int64(183), 'dropout': 0.08439771317838103}, value=0.0000
2025-09-16 01:05:03,830 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 4: {'lr': 0.05678201970293135, 'batch_size': np.int64(32), 'epochs': np.int64(5), 'hidden_size': np.int64(183), 'dropout': 0.08439771317838103} -> 0.0000
2025-09-16 01:05:03,831 - INFO - bo.run_bo - BO Trial 5: Using RF surrogate + Expected Improvement
2025-09-16 01:05:03,831 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:03,831 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:03,831 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:03,831 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006550049531232524, 'batch_size': 256, 'epochs': 6, 'hidden_size': 373, 'dropout': 0.4568590869235105}
2025-09-16 01:05:03,837 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006550049531232524, 'epochs': 6, 'batch_size': 256, 'hidden_size': 373, 'dropout': 0.4568590869235105}
2025-09-16 01:05:03,867 - ERROR - models.training_function_executor - Training execution failed: Model has 901403 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:03,867 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:03,867 - ERROR - models.training_function_executor - BO training objective failed: Model has 901403 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:03,867 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.036s
2025-09-16 01:05:04,264 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:04,264 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.397s
2025-09-16 01:05:04,265 - INFO - bo.run_bo - Recorded observation #5: hparams={'lr': 0.0006550049531232524, 'batch_size': np.int64(256), 'epochs': np.int64(6), 'hidden_size': np.int64(373), 'dropout': 0.4568590869235105}, value=0.0000
2025-09-16 01:05:04,265 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 5: {'lr': 0.0006550049531232524, 'batch_size': np.int64(256), 'epochs': np.int64(6), 'hidden_size': np.int64(373), 'dropout': 0.4568590869235105} -> 0.0000
2025-09-16 01:05:04,265 - INFO - bo.run_bo - BO Trial 6: Using RF surrogate + Expected Improvement
2025-09-16 01:05:04,265 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:04,266 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:04,266 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:04,266 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006302883671688219, 'batch_size': 128, 'epochs': 24, 'hidden_size': 432, 'dropout': 0.24572406269266053}
2025-09-16 01:05:04,273 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006302883671688219, 'epochs': 24, 'batch_size': 128, 'hidden_size': 432, 'dropout': 0.24572406269266053}
2025-09-16 01:05:04,308 - ERROR - models.training_function_executor - Training execution failed: Model has 1205987 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:04,309 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:04,309 - ERROR - models.training_function_executor - BO training objective failed: Model has 1205987 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:04,309 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.043s
2025-09-16 01:05:04,703 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:04,703 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.394s
2025-09-16 01:05:04,703 - INFO - bo.run_bo - Recorded observation #6: hparams={'lr': 0.0006302883671688219, 'batch_size': np.int64(128), 'epochs': np.int64(24), 'hidden_size': np.int64(432), 'dropout': 0.24572406269266053}, value=0.0000
2025-09-16 01:05:04,703 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 6: {'lr': 0.0006302883671688219, 'batch_size': np.int64(128), 'epochs': np.int64(24), 'hidden_size': np.int64(432), 'dropout': 0.24572406269266053} -> 0.0000
2025-09-16 01:05:04,704 - INFO - bo.run_bo - BO Trial 7: Using RF surrogate + Expected Improvement
2025-09-16 01:05:04,704 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:04,704 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:04,704 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:04,704 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.04222247265603969, 'batch_size': 16, 'epochs': 18, 'hidden_size': 51, 'dropout': 0.25007875594551915}
2025-09-16 01:05:04,711 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.04222247265603969, 'epochs': 18, 'batch_size': 16, 'hidden_size': 51, 'dropout': 0.25007875594551915}
2025-09-16 01:05:04,728 - ERROR - models.training_function_executor - Training execution failed: 'str' object has no attribute 'type'
2025-09-16 01:05:04,728 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:04,728 - ERROR - models.training_function_executor - BO training objective failed: 'str' object has no attribute 'type'
2025-09-16 01:05:04,728 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.024s
2025-09-16 01:05:05,119 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:05,119 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.390s
2025-09-16 01:05:05,119 - INFO - bo.run_bo - Recorded observation #7: hparams={'lr': 0.04222247265603969, 'batch_size': np.int64(16), 'epochs': np.int64(18), 'hidden_size': np.int64(51), 'dropout': 0.25007875594551915}, value=0.0000
2025-09-16 01:05:05,119 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 7: {'lr': 0.04222247265603969, 'batch_size': np.int64(16), 'epochs': np.int64(18), 'hidden_size': np.int64(51), 'dropout': 0.25007875594551915} -> 0.0000
2025-09-16 01:05:05,120 - INFO - bo.run_bo - BO Trial 8: Using RF surrogate + Expected Improvement
2025-09-16 01:05:05,120 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:05,120 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:05,120 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:05,121 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.015831723490615644, 'batch_size': 32, 'epochs': 12, 'hidden_size': 319, 'dropout': 0.2621266723153076}
2025-09-16 01:05:05,127 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.015831723490615644, 'epochs': 12, 'batch_size': 32, 'hidden_size': 319, 'dropout': 0.2621266723153076}
2025-09-16 01:05:05,152 - ERROR - models.training_function_executor - Training execution failed: Model has 662444 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,152 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:05,152 - ERROR - models.training_function_executor - BO training objective failed: Model has 662444 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,153 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.032s
2025-09-16 01:05:05,537 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:05,537 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.384s
2025-09-16 01:05:05,537 - INFO - bo.run_bo - Recorded observation #8: hparams={'lr': 0.015831723490615644, 'batch_size': np.int64(32), 'epochs': np.int64(12), 'hidden_size': np.int64(319), 'dropout': 0.2621266723153076}, value=0.0000
2025-09-16 01:05:05,537 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 8: {'lr': 0.015831723490615644, 'batch_size': np.int64(32), 'epochs': np.int64(12), 'hidden_size': np.int64(319), 'dropout': 0.2621266723153076} -> 0.0000
2025-09-16 01:05:05,538 - INFO - bo.run_bo - BO Trial 9: Using RF surrogate + Expected Improvement
2025-09-16 01:05:05,538 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:05,538 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:05,538 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:05,538 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0004582655140915009, 'batch_size': 8, 'epochs': 22, 'hidden_size': 288, 'dropout': 0.2979985056070939}
2025-09-16 01:05:05,544 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0004582655140915009, 'epochs': 22, 'batch_size': 8, 'hidden_size': 288, 'dropout': 0.2979985056070939}
2025-09-16 01:05:05,566 - ERROR - models.training_function_executor - Training execution failed: Model has 544793 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,566 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:05,566 - ERROR - models.training_function_executor - BO training objective failed: Model has 544793 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,566 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.028s
2025-09-16 01:05:05,955 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:05,955 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.389s
2025-09-16 01:05:05,955 - INFO - bo.run_bo - Recorded observation #9: hparams={'lr': 0.0004582655140915009, 'batch_size': np.int64(8), 'epochs': np.int64(22), 'hidden_size': np.int64(288), 'dropout': 0.2979985056070939}, value=0.0000
2025-09-16 01:05:05,956 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 9: {'lr': 0.0004582655140915009, 'batch_size': np.int64(8), 'epochs': np.int64(22), 'hidden_size': np.int64(288), 'dropout': 0.2979985056070939} -> 0.0000
2025-09-16 01:05:05,956 - INFO - bo.run_bo - BO Trial 10: Using RF surrogate + Expected Improvement
2025-09-16 01:05:05,956 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:05:05,956 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:05,957 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:05,957 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0019299580918507716, 'batch_size': 16, 'epochs': 25, 'hidden_size': 367, 'dropout': 0.5945242340829255}
2025-09-16 01:05:05,963 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0019299580918507716, 'epochs': 25, 'batch_size': 16, 'hidden_size': 367, 'dropout': 0.5945242340829255}
2025-09-16 01:05:05,991 - ERROR - models.training_function_executor - Training execution failed: Model has 872222 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,991 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:05,991 - ERROR - models.training_function_executor - BO training objective failed: Model has 872222 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:05,991 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.035s
2025-09-16 01:05:06,381 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:05:06,382 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.390s
2025-09-16 01:05:06,382 - INFO - bo.run_bo - Recorded observation #10: hparams={'lr': 0.0019299580918507716, 'batch_size': np.int64(16), 'epochs': np.int64(25), 'hidden_size': np.int64(367), 'dropout': 0.5945242340829255}, value=0.0000
2025-09-16 01:05:06,382 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 10: {'lr': 0.0019299580918507716, 'batch_size': np.int64(16), 'epochs': np.int64(25), 'hidden_size': np.int64(367), 'dropout': 0.5945242340829255} -> 0.0000
2025-09-16 01:05:06,383 - INFO - evaluation.code_generation_pipeline_orchestrator - BO completed - Best score: 0.0000
2025-09-16 01:05:06,383 - INFO - evaluation.code_generation_pipeline_orchestrator - Best params: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093}
2025-09-16 01:05:06,384 - INFO - visualization - Generating BO visualization charts with 10 trials...
2025-09-16 01:05:15,834 - INFO - visualization - BO summary saved to: charts/BO_ECG-TCN-SE-Light_20250916_010506/bo_summary.txt
2025-09-16 01:05:15,835 - INFO - visualization - BO charts saved to: charts/BO_ECG-TCN-SE-Light_20250916_010506
2025-09-16 01:05:15,835 - INFO - evaluation.code_generation_pipeline_orchestrator - 📊 BO charts saved to: charts/BO_ECG-TCN-SE-Light_20250916_010506
2025-09-16 01:05:15,835 - INFO - evaluation.code_generation_pipeline_orchestrator - 🚀 STEP 4: Final Training Execution
2025-09-16 01:05:15,836 - INFO - evaluation.code_generation_pipeline_orchestrator - Using centralized splits - Train: (39904, 1000, 2), Val: (9977, 1000, 2), Test: (12471, 1000, 2)
2025-09-16 01:05:16,173 - INFO - models.training_function_executor - Loaded training function: ECG-TCN-SE-Light
2025-09-16 01:05:16,174 - INFO - models.training_function_executor - Reasoning: The model is a compact Conv-TCN with dilated depthwise-separable convolutions and Squeeze-and-Excitation, aligning with recent ECG literature that favors CNN/TCN backbones for local morphology plus longer temporal context on ~1000-sample segments. We include class-weighted cross-entropy (to mitigate S/F rarity) and label smoothing; AMP and gradient clipping improve stability/throughput. The network is lightweight (<256K params by default), suitable for fair AAMI 5-class evaluation and inter-patient splits (e.g., de Chazal DS1/DS2).
2025-09-16 01:05:16,174 - INFO - evaluation.code_generation_pipeline_orchestrator - Executing final training with optimized params: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093}
2025-09-16 01:05:16,174 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:05:16,264 - INFO - models.training_function_executor - Executing training function: ECG-TCN-SE-Light
2025-09-16 01:05:16,264 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093}
2025-09-16 01:05:16,272 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.01535224694197351, 'epochs': 10, 'batch_size': 16, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 01:05:16,293 - ERROR - models.training_function_executor - Training execution failed: Model has 277774 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:16,293 - ERROR - models.training_function_executor - Training code: import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import TensorDataset, DataLoader

class SqueezeExcite1D(nn.Module):
    def __init__(self, channels: int, reduc...
2025-09-16 01:05:16,293 - ERROR - evaluation.code_generation_pipeline_orchestrator - Pipeline attempt 1 failed: Model has 277774 parameters; increase efficiency or reduce hidden_size to stay <256k.
2025-09-16 01:05:16,353 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 01:05:16,354 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE ATTEMPT 2/4
2025-09-16 01:05:16,354 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 01:05:16,354 - INFO - evaluation.code_generation_pipeline_orchestrator - 🤖 STEP 1: AI Training Code Generation
2025-09-16 01:05:16,354 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 01:07:14,244 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Prompt length: 4583 characters
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 01:07:14,307 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 01:08:45,320 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:08:45,368 - INFO - models.ai_code_generator - API call completed successfully
2025-09-16 01:08:45,369 - INFO - models.ai_code_generator - Response type: <class 'openai.types.responses.response.Response'>
2025-09-16 01:08:45,369 - INFO - models.ai_code_generator - Response attributes: ['__abstractmethods__', '__annotations__', '__class__', '__class_getitem__', '__class_vars__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__fields__', '__fields_set__', '__format__', '__ge__', '__get_pydantic_core_schema__', '__get_pydantic_json_schema__', '__getattr__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pretty__', '__private_attributes__', '__pydantic_complete__', '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__', '__pydantic_decorators__', '__pydantic_extra__', '__pydantic_fields__', '__pydantic_fields_set__', '__pydantic_generic_metadata__', '__pydantic_init_subclass__', '__pydantic_parent_namespace__', '__pydantic_post_init__', '__pydantic_private__', '__pydantic_root_model__', '__pydantic_serializer__', '__pydantic_setattr_handlers__', '__pydantic_validator__', '__reduce__', '__reduce_ex__', '__replace__', '__repr__', '__repr_args__', '__repr_name__', '__repr_recursion__', '__repr_str__', '__rich_repr__', '__setattr__', '__setstate__', '__signature__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_calculate_keys', '_copy_and_set_values', '_get_value', '_iter', '_request_id', '_setattr_handler', 'background', 'construct', 'conversation', 'copy', 'created_at', 'dict', 'error', 'from_orm', 'id', 'incomplete_details', 'instructions', 'json', 'max_output_tokens', 'max_tool_calls', 'metadata', 'model', 'model_computed_fields', 'model_config', 'model_construct', 'model_copy', 'model_dump', 'model_dump_json', 'model_extra', 'model_fields', 'model_fields_set', 'model_json_schema', 'model_parametrized_name', 'model_post_init', 'model_rebuild', 'model_validate', 'model_validate_json', 'model_validate_strings', 'object', 'output', 'output_text', 'parallel_tool_calls', 'parse_file', 'parse_obj', 'parse_raw', 'previous_response_id', 'prompt', 'prompt_cache_key', 'reasoning', 'safety_identifier', 'schema', 'schema_json', 'service_tier', 'status', 'temperature', 'text', 'to_dict', 'to_json', 'tool_choice', 'tools', 'top_logprobs', 'top_p', 'truncation', 'update_forward_refs', 'usage', 'user', 'validate']
2025-09-16 01:08:45,369 - INFO - models.ai_code_generator - Using response.output_text
2025-09-16 01:08:45,369 - INFO - models.ai_code_generator - Extracted result length: 10306 characters
2025-09-16 01:08:45,369 - INFO - models.ai_code_generator - Result preview: {
    "model_name": "ECGConvTransformerTiny",
    "training_code": "def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):\n    \"\"\"\n    Train a lightweight 1D CNN + Transformer en...
2025-09-16 01:08:45,370 - INFO - models.ai_code_generator - Successfully extracted response content
2025-09-16 01:08:45,370 - WARNING - models.ai_code_generator - Initial JSON parse failed: Expecting ',' delimiter: line 43 column 24 (char 10179), attempting to fix common issues
2025-09-16 01:08:45,372 - WARNING - models.ai_code_generator - Standard fixes failed, attempting manual JSON repair
2025-09-16 01:08:45,372 - INFO - models.ai_code_generator - Saved malformed JSON to debug_malformed_json.txt for debugging
2025-09-16 01:08:45,372 - ERROR - models.ai_code_generator - Failed to parse code recommendation: Expecting ',' delimiter: line 43 column 24 (char 10167)
2025-09-16 01:08:45,373 - ERROR - models.ai_code_generator - Original response: {
    "model_name": "ECGConvTransformerTiny",
    "training_code": "def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):\n    \"\"\"\n    Train a lightweight 1D CNN + Transformer encoder for 5-class ECG classification.\n    - Input tensors: X_* shape [N, 1000, 2] or [N, 2, 1000]; y_* shape [N] with class ids 0..4\n    - MIT-BIH note: use an inter-patient split (e.g., AAMI DS1→DS2) outside this function to avoid leakage.\n    \"\"\"\n    import math\n    import torch\n    import torch.nn as nn\n    from torch.utils.data import Dataset, DataLoader\n\n    # -------------------- defaults & hyperparams --------------------\n    cfg = {\n        'n_classes': 5,\n        'epochs': 20,\n        'batch_size': 128,\n        'lr': 3e-4,\n        'weight_decay': 1e-4,\n        'hidden_size': 64,      # Transformer d_model (kept small for <256K params)\n        'n_heads': 4,\n        'n_layers': 2,\n        'dropout': 0.1,\n        'label_smoothing': 0.05,\n        'grad_clip': 1.0,\n        'num_workers': 0\n    }\n    cfg.update(hyperparams or {})\n\n    # -------------------- Dataset & DataLoaders --------------------\n    class ECGDataset(Dataset):\n        def __init__(self, X, y):\n            self.X = X\n            self.y = y\n            assert self.X.shape[0] == self.y.shape[0], 'Mismatched X/y sizes'\n        def __len__(self):\n            return self.X.shape[0]\n        def __getitem__(self, idx):\n            x = self.X[idx]\n            y = self.y[idx]\n            # Expect [L, C] or [C, L]; convert to [C, L] for Conv1d\n            if x.dim() == 2:\n                if x.shape[-1] <= 4:  # likely [L, C]\n                    x = x.transpose(0, 1)\n            x = x.float()\n            return x, y.long()\n\n    # pin_memory only if tensors live on CPU\n    pin_mem = (X_train.device.type == 'cpu' and y_train.device.type == 'cpu')\n\n    train_ds = ECGDataset(X_train, y_train)\n    val_ds = ECGDataset(X_val, y_val)\n\n    train_loader = DataLoader(\n        train_ds,\n        batch_size=cfg['batch_size'],\n        shuffle=True,\n        num_workers=cfg['num_workers'],\n        pin_memory=pin_mem,\n        drop_last=False\n    )\n    val_loader = DataLoader(\n        val_ds,\n        batch_size=cfg['batch_size'],\n        shuffle=False,\n        num_workers=cfg['num_workers'],\n        pin_memory=pin_mem,\n        drop_last=False\n    )\n\n    # -------------------- Model --------------------\n    class SinusoidalPositionalEncoding(nn.Module):\n        def __init__(self, d_model, max_len=2000):\n            super().__init__()\n            pe = torch.zeros(max_len, d_model)\n            position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n            div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n            pe[:, 0::2] = torch.sin(position * div_term)\n            pe[:, 1::2] = torch.cos(position * div_term)\n            self.register_buffer('pe', pe)  # [max_len, d_model]\n        def forward(self, x):\n            # x: [S, B, E]\n            S = x.size(0)\n            return x + self.pe[:S].unsqueeze(1)\n\n    class ConvTransformerECG(nn.Module):\n        def __init__(self, n_classes=5, d_model=64, n_heads=4, n_layers=2, dropout=0.1):\n            super().__init__()\n            # Conv stem: downsample 1000 -> 250 (stride 2 twice)\n            self.stem = nn.Sequential(\n                nn.Conv1d(2, 64, kernel_size=7, stride=2, padding=3),\n                nn.BatchNorm1d(64),\n                nn.ReLU(inplace=True),\n                nn.Conv1d(64, 128, kernel_size=5, stride=2, padding=2),\n                nn.BatchNorm1d(128),\n                nn.ReLU(inplace=True),\n                nn.Conv1d(128, d_model, kernel_size=3, stride=1, padding=1),\n                nn.BatchNorm1d(d_model),\n                nn.ReLU(inplace=True),\n                nn.Dropout(dropout)\n            )\n            self.pos = SinusoidalPositionalEncoding(d_model)\n            enc_layer = nn.TransformerEncoderLayer(\n                d_model=d_model,\n                nhead=n_heads,\n                dim_feedforward=4 * d_model,\n                dropout=dropout,\n                batch_first=False,  # expect [S, B, E]\n                activation='gelu',\n                norm_first=True\n            )\n            self.encoder = nn.TransformerEncoder(enc_layer, num_layers=n_layers)\n            self.head = nn.Sequential(\n                nn.LayerNorm(d_model),\n                nn.Dropout(dropout),\n                nn.Linear(d_model, n_classes)\n            )\n        def forward(self, x):\n            # x: [B, C, L]\n            z = self.stem(x)              # [B, d_model, L']\n            z = z.transpose(1, 2)         # [B, L', d_model]\n            z = z.transpose(0, 1)         # [L', B, d_model]\n            z = self.pos(z)               # add PE\n            z = self.encoder(z)           # [L', B, d_model]\n            z = z.mean(dim=0)             # global average over time -> [B, d_model]\n            logits = self.head(z)         # [B, n_classes]\n            return logits\n\n    model = ConvTransformerECG(\n        n_classes=cfg['n_classes'],\n        d_model=cfg['hidden_size'],\n        n_heads=cfg['n_heads'],\n        n_layers=cfg['n_layers'],\n        dropout=cfg['dropout']\n    ).to(device)\n\n    # -------------------- Loss, Optimizer --------------------\n    # Class weights (balanced): N / (C * count_c)\n    with torch.no_grad():\n        counts = torch.bincount(y_train.detach().cpu(), minlength=cfg['n_classes']).float()\n        balanced_w = (len(y_train) / (cfg['n_classes'] * counts.clamp_min(1.0))).to(device)\n    criterion = nn.CrossEntropyLoss(weight=balanced_w, label_smoothing=cfg['label_smoothing'])\n    optimizer = torch.optim.AdamW(model.parameters(), lr=cfg['lr'], weight_decay=cfg['weight_decay'])\n\n    # -------------------- Metrics helpers --------------------\n    def macro_f1_from_preds(preds_cpu, t_cpu, num_classes):\n        f1_sum = 0.0\n        for c in range(num_classes):\n            tp = ((preds_cpu == c) & (t_cpu == c)).sum().item()\n            fp = ((preds_cpu == c) & (t_cpu != c)).sum().item()\n            fn = ((preds_cpu != c) & (t_cpu == c)).sum().item()\n            prec = tp / (tp + fp + 1e-9)\n            rec = tp / (tp + fn + 1e-9)\n            f1 = 0.0 if (prec + rec) == 0 else (2 * prec * rec) / (prec + rec + 1e-9)\n            f1_sum += f1\n        return f1_sum / num_classes\n\n    def evaluate():\n        model.eval()\n        total, correct = 0, 0\n        val_loss_sum = 0.0\n        all_preds = []\n        all_targets = []\n        with torch.no_grad():\n            for xb, yb in val_loader:\n                xb = xb.to(device, non_blocking=True)\n                yb = yb.to(device, non_blocking=True)\n                logits = model(xb)\n                loss = criterion(logits, yb)\n                val_loss_sum += loss.item() * yb.size(0)\n                preds = logits.argmax(dim=1)\n                correct += (preds == yb).sum().item()\n                total += yb.size(0)\n                all_preds.append(preds.detach().cpu())\n                all_targets.append(yb.detach().cpu())\n        val_loss = val_loss_sum / max(1, total)\n        all_preds = torch.cat(all_preds, dim=0)\n        all_targets = torch.cat(all_targets, dim=0)\n        acc = correct / max(1, total)\n        f1 = macro_f1_from_preds(all_preds, all_targets, cfg['n_classes'])\n        return val_loss, acc, f1\n\n    # -------------------- Training loop --------------------\n    history = {\n        'train_loss': [],\n        'val_loss': [],\n        'val_acc': [],\n        'val_f1_macro': [],\n        'class_weights': balanced_w.detach().cpu().tolist()\n    }\n\n    for epoch in range(cfg['epochs']):\n        model.train()\n        running = 0.0\n        seen = 0\n        for xb, yb in train_loader:\n            xb = xb.to(device, non_blocking=True)\n            yb = yb.to(device, non_blocking=True)\n            optimizer.zero_grad(set_to_none=True)\n            logits = model(xb)\n            loss = criterion(logits, yb)\n            loss.backward()\n            if cfg['grad_clip'] and cfg['grad_clip'] > 0:\n                torch.nn.utils.clip_grad_norm_(model.parameters(), cfg['grad_clip'])\n            optimizer.step()\n            bs = yb.size(0)\n            running += loss.item() * bs\n            seen += bs\n        train_loss = running / max(1, seen)\n        val_loss, val_acc, val_f1 = evaluate()\n        history['train_loss'].append(train_loss)\n        history['val_loss'].append(val_loss)\n        history['val_acc'].append(val_acc)\n        history['val_f1_macro'].append(val_f1)\n\n    return model, history\n",
    "hyperparameters": {
        "lr": 0.0003,
        "epochs": 20,
        "batch_size": 128
    },
    "reasoning": "Implements a compact local-global encoder: a 1D CNN stem downsamples the two-lead ECG to capture morphology (QRS/P/T) and reduce sequence length (1000→250), followed by a small Transformer encoder (d_model=64, 2 layers, 4 heads) to model rhythm/context across beats. This hybrid matches literature showing CNN+attention effectiveness on MIT-BIH while staying lightweight (<256K params). Class-imbalance is addressed with balanced loss weights and label smoothing; evaluation reports accuracy and macro-F1. Pin memory is enabled only when tensors reside on CPU as required.",
    "confidence": 0.9,
    "bo_parameters": [
        "lr",
        "batch_size",
        "epochs",
        "hidden_size",
        "dropout"
    ],
    "bo_search_space": {
        "lr": {
            "type": "Real",
            "low": 1e-05,
            "high": 0.1,
            "prior": "log-uniform"
        },
        "batch_size": {
            "type": "Categorical",
            "categories": [
                8,
                16,
                32,
                64,
                128
            ]
        },
        "epochs": {
            "type": "Integer",
            "low": 5,
            "high": 50
        },
        "hidden_size": {
            "type": "Integer",
            "low": 32,
            "high": 512"
        },
        "dropout": {
            "type": "Real",
            "low": 0.0,
            "high": 0.7
        }
    }
}
2025-09-16 01:08:45,373 - ERROR - evaluation.code_generation_pipeline_orchestrator - Pipeline attempt 2 failed: Failed to parse AI code recommendation: Expecting ',' delimiter: line 43 column 24 (char 10167)
2025-09-16 01:08:45,374 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 01:08:45,374 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE ATTEMPT 3/4
2025-09-16 01:08:45,374 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 01:08:45,374 - INFO - evaluation.code_generation_pipeline_orchestrator - 🤖 STEP 1: AI Training Code Generation
2025-09-16 01:08:45,374 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 01:10:37,319 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:10:37,374 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 01:10:37,375 - INFO - models.ai_code_generator - Prompt length: 5270 characters
2025-09-16 01:10:37,375 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 01:10:37,375 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 01:10:37,375 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 01:10:37,375 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 01:13:11,840 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:13:11,892 - INFO - models.ai_code_generator - API call completed successfully
2025-09-16 01:13:11,892 - INFO - models.ai_code_generator - Response type: <class 'openai.types.responses.response.Response'>
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - Response attributes: ['__abstractmethods__', '__annotations__', '__class__', '__class_getitem__', '__class_vars__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__fields__', '__fields_set__', '__format__', '__ge__', '__get_pydantic_core_schema__', '__get_pydantic_json_schema__', '__getattr__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pretty__', '__private_attributes__', '__pydantic_complete__', '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__', '__pydantic_decorators__', '__pydantic_extra__', '__pydantic_fields__', '__pydantic_fields_set__', '__pydantic_generic_metadata__', '__pydantic_init_subclass__', '__pydantic_parent_namespace__', '__pydantic_post_init__', '__pydantic_private__', '__pydantic_root_model__', '__pydantic_serializer__', '__pydantic_setattr_handlers__', '__pydantic_validator__', '__reduce__', '__reduce_ex__', '__replace__', '__repr__', '__repr_args__', '__repr_name__', '__repr_recursion__', '__repr_str__', '__rich_repr__', '__setattr__', '__setstate__', '__signature__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_calculate_keys', '_copy_and_set_values', '_get_value', '_iter', '_request_id', '_setattr_handler', 'background', 'construct', 'conversation', 'copy', 'created_at', 'dict', 'error', 'from_orm', 'id', 'incomplete_details', 'instructions', 'json', 'max_output_tokens', 'max_tool_calls', 'metadata', 'model', 'model_computed_fields', 'model_config', 'model_construct', 'model_copy', 'model_dump', 'model_dump_json', 'model_extra', 'model_fields', 'model_fields_set', 'model_json_schema', 'model_parametrized_name', 'model_post_init', 'model_rebuild', 'model_validate', 'model_validate_json', 'model_validate_strings', 'object', 'output', 'output_text', 'parallel_tool_calls', 'parse_file', 'parse_obj', 'parse_raw', 'previous_response_id', 'prompt', 'prompt_cache_key', 'reasoning', 'safety_identifier', 'schema', 'schema_json', 'service_tier', 'status', 'temperature', 'text', 'to_dict', 'to_json', 'tool_choice', 'tools', 'top_logprobs', 'top_p', 'truncation', 'update_forward_refs', 'usage', 'user', 'validate']
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - Using response.output_text
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - Extracted result length: 14351 characters
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - Result preview: {
    "model_name": "TinyECG1DTransformer-ConvStem",
    "training_code": "import torch\\nimport torch.nn as nn\\nimport torch.nn.functional as F\\nfrom torch.utils.data import DataLoader, TensorDatas...
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - Successfully extracted response content
2025-09-16 01:13:11,893 - INFO - models.ai_code_generator - AI generated training function: TinyECG1DTransformer-ConvStem
2025-09-16 01:13:11,894 - INFO - models.ai_code_generator - Confidence: 0.90
2025-09-16 01:13:11,894 - INFO - models.ai_code_generator - Reasoning: The model follows recent findings for MIT-BIH AAMI 5-class classification: a compact 1D convolutional stem captures local P–QRS–T morphology and a tiny Transformer encoder models rhythm context across a 1000-sample window. This hybrid is more accurate and efficient than pure CNNs or pure Transformers on raw ECG windows, while staying deployable (<256K parameters). We add sinusoidal positional encoding, AdamW, label smoothing (0.05), class-balanced loss (or optional focal loss), mixed precision, and gradient clipping—simple, robust defaults. For evaluation, report inter-patient DS1→DS2 performance when preparing data to avoid patient overlap per current best practice.
2025-09-16 01:13:11,894 - INFO - models.ai_code_generator - Literature review informed code generation (confidence: 0.78)
2025-09-16 01:13:11,894 - INFO - evaluation.code_generation_pipeline_orchestrator - Generated training function: TinyECG1DTransformer-ConvStem
2025-09-16 01:13:11,894 - INFO - evaluation.code_generation_pipeline_orchestrator - Reasoning: The model follows recent findings for MIT-BIH AAMI 5-class classification: a compact 1D convolutional stem captures local P–QRS–T morphology and a tiny Transformer encoder models rhythm context across a 1000-sample window. This hybrid is more accurate and efficient than pure CNNs or pure Transformers on raw ECG windows, while staying deployable (<256K parameters). We add sinusoidal positional encoding, AdamW, label smoothing (0.05), class-balanced loss (or optional focal loss), mixed precision, and gradient clipping—simple, robust defaults. For evaluation, report inter-patient DS1→DS2 performance when preparing data to avoid patient overlap per current best practice.
2025-09-16 01:13:11,894 - INFO - evaluation.code_generation_pipeline_orchestrator - BO parameters: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 01:13:11,894 - INFO - evaluation.code_generation_pipeline_orchestrator - Confidence: 0.90
2025-09-16 01:13:11,894 - INFO - evaluation.code_generation_pipeline_orchestrator - 💾 STEP 2: Save Training Function to JSON
2025-09-16 01:13:11,896 - INFO - models.ai_code_generator - Training function saved to: generated_training_functions/training_function_numpy_array_TinyECG1DTransformer-ConvStem_1757985191.json
2025-09-16 01:13:11,896 - INFO - evaluation.code_generation_pipeline_orchestrator - Training function saved to: generated_training_functions/training_function_numpy_array_TinyECG1DTransformer-ConvStem_1757985191.json
2025-09-16 01:13:11,896 - ERROR - models.training_function_executor - Syntax error in training code: unexpected character after line continuation character (<string>, line 1)
2025-09-16 01:13:11,896 - ERROR - evaluation.code_generation_pipeline_orchestrator - Pipeline attempt 3 failed: Generated training function failed validation
2025-09-16 01:13:11,896 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 01:13:11,896 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE ATTEMPT 4/4
2025-09-16 01:13:11,896 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 01:13:11,897 - INFO - evaluation.code_generation_pipeline_orchestrator - 🤖 STEP 1: AI Training Code Generation
2025-09-16 01:13:11,897 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 01:15:32,608 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:15:32,674 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 01:15:32,674 - INFO - models.ai_code_generator - Prompt length: 5030 characters
2025-09-16 01:15:32,674 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 01:15:32,674 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 01:15:32,674 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 01:15:32,675 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 01:17:11,281 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:17:11,331 - INFO - models.ai_code_generator - API call completed successfully
2025-09-16 01:17:11,332 - INFO - models.ai_code_generator - Response type: <class 'openai.types.responses.response.Response'>
2025-09-16 01:17:11,332 - INFO - models.ai_code_generator - Response attributes: ['__abstractmethods__', '__annotations__', '__class__', '__class_getitem__', '__class_vars__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__fields__', '__fields_set__', '__format__', '__ge__', '__get_pydantic_core_schema__', '__get_pydantic_json_schema__', '__getattr__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pretty__', '__private_attributes__', '__pydantic_complete__', '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__', '__pydantic_decorators__', '__pydantic_extra__', '__pydantic_fields__', '__pydantic_fields_set__', '__pydantic_generic_metadata__', '__pydantic_init_subclass__', '__pydantic_parent_namespace__', '__pydantic_post_init__', '__pydantic_private__', '__pydantic_root_model__', '__pydantic_serializer__', '__pydantic_setattr_handlers__', '__pydantic_validator__', '__reduce__', '__reduce_ex__', '__replace__', '__repr__', '__repr_args__', '__repr_name__', '__repr_recursion__', '__repr_str__', '__rich_repr__', '__setattr__', '__setstate__', '__signature__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_calculate_keys', '_copy_and_set_values', '_get_value', '_iter', '_request_id', '_setattr_handler', 'background', 'construct', 'conversation', 'copy', 'created_at', 'dict', 'error', 'from_orm', 'id', 'incomplete_details', 'instructions', 'json', 'max_output_tokens', 'max_tool_calls', 'metadata', 'model', 'model_computed_fields', 'model_config', 'model_construct', 'model_copy', 'model_dump', 'model_dump_json', 'model_extra', 'model_fields', 'model_fields_set', 'model_json_schema', 'model_parametrized_name', 'model_post_init', 'model_rebuild', 'model_validate', 'model_validate_json', 'model_validate_strings', 'object', 'output', 'output_text', 'parallel_tool_calls', 'parse_file', 'parse_obj', 'parse_raw', 'previous_response_id', 'prompt', 'prompt_cache_key', 'reasoning', 'safety_identifier', 'schema', 'schema_json', 'service_tier', 'status', 'temperature', 'text', 'to_dict', 'to_json', 'tool_choice', 'tools', 'top_logprobs', 'top_p', 'truncation', 'update_forward_refs', 'usage', 'user', 'validate']
2025-09-16 01:17:11,332 - INFO - models.ai_code_generator - Using response.output_text
2025-09-16 01:17:11,332 - INFO - models.ai_code_generator - Extracted result length: 14006 characters
2025-09-16 01:17:11,332 - INFO - models.ai_code_generator - Result preview: {
    "model_name": "TinyECGHybridTransformer",
    "training_code": "def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):\n    import math\n    import torch\n    import torch.nn as...
2025-09-16 01:17:11,333 - INFO - models.ai_code_generator - Successfully extracted response content
2025-09-16 01:17:11,333 - INFO - models.ai_code_generator - AI generated training function: TinyECGHybridTransformer
2025-09-16 01:17:11,333 - INFO - models.ai_code_generator - Confidence: 0.90
2025-09-16 01:17:11,333 - INFO - models.ai_code_generator - Reasoning: Implements a lightweight 1D CNN front end plus a small Transformer encoder, reflecting recent findings that local morphology and global rhythm context together boost 5-class MIT-BIH performance. The model downsamples to ~125 tokens, enabling efficient attention. We include optional focal loss and class weighting to improve sensitivity to minority S/V/F/Q classes as recommended by literature. Simple augmentations (scale, noise, shift) improve robustness. Architecture stays under 256K parameters by using modest channels and 2 Transformer layers, suitable for sequences of length 1000 with 2 leads. Inter-patient split and AAMI mapping are assumed handled upstream.
2025-09-16 01:17:11,333 - INFO - models.ai_code_generator - Literature review informed code generation (confidence: 0.82)
2025-09-16 01:17:11,333 - INFO - evaluation.code_generation_pipeline_orchestrator - Generated training function: TinyECGHybridTransformer
2025-09-16 01:17:11,333 - INFO - evaluation.code_generation_pipeline_orchestrator - Reasoning: Implements a lightweight 1D CNN front end plus a small Transformer encoder, reflecting recent findings that local morphology and global rhythm context together boost 5-class MIT-BIH performance. The model downsamples to ~125 tokens, enabling efficient attention. We include optional focal loss and class weighting to improve sensitivity to minority S/V/F/Q classes as recommended by literature. Simple augmentations (scale, noise, shift) improve robustness. Architecture stays under 256K parameters by using modest channels and 2 Transformer layers, suitable for sequences of length 1000 with 2 leads. Inter-patient split and AAMI mapping are assumed handled upstream.
2025-09-16 01:17:11,333 - INFO - evaluation.code_generation_pipeline_orchestrator - BO parameters: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 01:17:11,334 - INFO - evaluation.code_generation_pipeline_orchestrator - Confidence: 0.90
2025-09-16 01:17:11,334 - INFO - evaluation.code_generation_pipeline_orchestrator - 💾 STEP 2: Save Training Function to JSON
2025-09-16 01:17:11,335 - INFO - models.ai_code_generator - Training function saved to: generated_training_functions/training_function_numpy_array_TinyECGHybridTransformer_1757985431.json
2025-09-16 01:17:11,335 - INFO - evaluation.code_generation_pipeline_orchestrator - Training function saved to: generated_training_functions/training_function_numpy_array_TinyECGHybridTransformer_1757985431.json
2025-09-16 01:17:11,344 - INFO - models.training_function_executor - Training function validation passed
2025-09-16 01:17:11,344 - INFO - evaluation.code_generation_pipeline_orchestrator - 🔍 STEP 3: Bayesian Optimization
2025-09-16 01:17:11,344 - INFO - evaluation.code_generation_pipeline_orchestrator - Running BO for generated training function: TinyECGHybridTransformer
2025-09-16 01:17:11,387 - INFO - evaluation.code_generation_pipeline_orchestrator - BO dataset size: 5000 samples
2025-09-16 01:17:11,387 - INFO - evaluation.code_generation_pipeline_orchestrator - BO will optimize: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 01:17:11,388 - INFO - models.training_function_executor - GPU available: NVIDIA H100 NVL
2025-09-16 01:17:11,388 - WARNING - models.training_function_executor - Using provided subset instead of centralized splits - this may cause data leakage
2025-09-16 01:17:11,447 - INFO - bo.run_bo - Using explicitly provided search space
2025-09-16 01:17:11,450 - INFO - bo.run_bo - Initialized Random Forest Bayesian Optimizer
2025-09-16 01:17:11,452 - INFO - bo.run_bo - BO Trial 1: Initial random exploration
2025-09-16 01:17:11,453 - INFO - bo.run_bo - [PROFILE] suggest() took 0.002s
2025-09-16 01:17:11,453 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:17:11,453 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:17:11,453 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': 10, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 01:17:11,460 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.01535224694197351, 'epochs': 10, 'batch_size': 16, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 01:18:25,436 - INFO - models.training_function_executor - Training completed successfully: {'history': {'train_loss': [0.3348076869454235, 0.1826095350254327, 0.15810743338242172, 0.15076604910567404, 0.13978326477482914, 0.14707809726521373, 0.13325771603174508, 0.14046389773860574, 0.1358479681480676, 0.13715662525780498], 'val_loss': [0.19509134012460708, 0.12833635269850494, 0.14708748841285704, 0.12199474434554577, 0.21502332118153572, 0.13777305610477925, 0.30431891477108003, 0.12280179802328348, 0.17143514060974122, 0.10503085021674632], 'val_acc': [0.019999999552965164, 0.09200000017881393, 0.024000000208616257, 0.09799999743700027, 0.019999999552965164, 0.08699999749660492, 0.019999999552965164, 0.1289999932050705, 0.0989999994635582, 0.03500000014901161], 'val_f1_macro': [0.007843137247197231, 0.07027727524640544, 0.018392731938825197, 0.07267104460826576, 0.007843137247197231, 0.07340998035335763, 0.007843137247197231, 0.1186386070164848, 0.05936574660758516, 0.04019066022121931]}, 'best_val_acc': 0.1289999932050705, 'param_count': 788173, 'model_name': 'TinyECGHybridTransformer', 'training_function_source': 'ai_generated', 'hyperparameters_used': {'lr': 0.01535224694197351, 'epochs': 10, 'batch_size': 16, 'hidden_size': 204, 'dropout': 0.41779511056254093}}
2025-09-16 01:18:25,437 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) took 73.984s
2025-09-16 01:18:25,439 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:18:25,439 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.001s
2025-09-16 01:18:25,439 - INFO - bo.run_bo - Recorded observation #1: hparams={'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093}, value=0.0000
2025-09-16 01:18:25,439 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 1: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': np.int64(10), 'hidden_size': np.int64(204), 'dropout': 0.41779511056254093} -> 0.0000
2025-09-16 01:18:25,442 - INFO - bo.run_bo - BO Trial 2: Initial random exploration
2025-09-16 01:18:25,442 - INFO - bo.run_bo - [PROFILE] suggest() took 0.003s
2025-09-16 01:18:25,443 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:18:25,443 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:18:25,443 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': 13, 'hidden_size': 103, 'dropout': 0.2335960277973153}
2025-09-16 01:18:25,452 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006071989493441302, 'epochs': 13, 'batch_size': 8, 'hidden_size': 103, 'dropout': 0.2335960277973153}
2025-09-16 01:18:25,616 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (51) must match the existing size (52) at non-singleton dimension 1.  Target sizes: [125, 51].  Tensor sizes: [125, 52]
2025-09-16 01:18:25,616 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:18:25,616 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (51) must match the existing size (52) at non-singleton dimension 1.  Target sizes: [125, 51].  Tensor sizes: [125, 52]
2025-09-16 01:18:25,616 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.174s
2025-09-16 01:18:25,617 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:18:25,617 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.001s
2025-09-16 01:18:25,617 - INFO - bo.run_bo - Recorded observation #2: hparams={'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': np.int64(13), 'hidden_size': np.int64(103), 'dropout': 0.2335960277973153}, value=0.0000
2025-09-16 01:18:25,617 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 2: {'lr': 0.0006071989493441302, 'batch_size': 8, 'epochs': np.int64(13), 'hidden_size': np.int64(103), 'dropout': 0.2335960277973153} -> 0.0000
2025-09-16 01:18:25,619 - INFO - bo.run_bo - BO Trial 3: Initial random exploration
2025-09-16 01:18:25,619 - INFO - bo.run_bo - [PROFILE] suggest() took 0.002s
2025-09-16 01:18:25,620 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:18:25,620 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:18:25,620 - INFO - models.training_function_executor - Hyperparameters: {'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': 23, 'hidden_size': 273, 'dropout': 0.5053991405867774}
2025-09-16 01:18:25,627 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 3.727925903376984e-05, 'epochs': 23, 'batch_size': 64, 'hidden_size': 273, 'dropout': 0.5053991405867774}
2025-09-16 01:18:25,745 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (136) must match the existing size (137) at non-singleton dimension 1.  Target sizes: [125, 136].  Tensor sizes: [125, 137]
2025-09-16 01:18:25,746 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:18:25,746 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (136) must match the existing size (137) at non-singleton dimension 1.  Target sizes: [125, 136].  Tensor sizes: [125, 137]
2025-09-16 01:18:25,746 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.126s
2025-09-16 01:18:26,150 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:18:26,150 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.404s
2025-09-16 01:18:26,150 - INFO - bo.run_bo - Recorded observation #3: hparams={'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': np.int64(23), 'hidden_size': np.int64(273), 'dropout': 0.5053991405867774}, value=0.0000
2025-09-16 01:18:26,150 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 3: {'lr': 3.727925903376984e-05, 'batch_size': 64, 'epochs': np.int64(23), 'hidden_size': np.int64(273), 'dropout': 0.5053991405867774} -> 0.0000
2025-09-16 01:18:26,151 - INFO - bo.run_bo - BO Trial 4: Using RF surrogate + Expected Improvement
2025-09-16 01:18:26,151 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:18:26,151 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:18:26,151 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:18:26,151 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.05678201970293135, 'batch_size': 32, 'epochs': 5, 'hidden_size': 183, 'dropout': 0.08439771317838103}
2025-09-16 01:18:26,159 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.05678201970293135, 'epochs': 5, 'batch_size': 32, 'hidden_size': 183, 'dropout': 0.08439771317838103}
2025-09-16 01:18:26,248 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (91) must match the existing size (92) at non-singleton dimension 1.  Target sizes: [125, 91].  Tensor sizes: [125, 92]
2025-09-16 01:18:26,249 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:18:26,249 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (91) must match the existing size (92) at non-singleton dimension 1.  Target sizes: [125, 91].  Tensor sizes: [125, 92]
2025-09-16 01:18:26,249 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.098s
2025-09-16 01:18:26,633 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:18:26,633 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.384s
2025-09-16 01:18:26,633 - INFO - bo.run_bo - Recorded observation #4: hparams={'lr': 0.05678201970293135, 'batch_size': np.int64(32), 'epochs': np.int64(5), 'hidden_size': np.int64(183), 'dropout': 0.08439771317838103}, value=0.0000
2025-09-16 01:18:26,634 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 4: {'lr': 0.05678201970293135, 'batch_size': np.int64(32), 'epochs': np.int64(5), 'hidden_size': np.int64(183), 'dropout': 0.08439771317838103} -> 0.0000
2025-09-16 01:18:26,634 - INFO - bo.run_bo - BO Trial 5: Using RF surrogate + Expected Improvement
2025-09-16 01:18:26,634 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:18:26,634 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:18:26,634 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:18:26,634 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006550049531232524, 'batch_size': 256, 'epochs': 6, 'hidden_size': 373, 'dropout': 0.4568590869235105}
2025-09-16 01:18:26,641 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006550049531232524, 'epochs': 6, 'batch_size': 256, 'hidden_size': 373, 'dropout': 0.4568590869235105}
2025-09-16 01:18:26,845 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (186) must match the existing size (187) at non-singleton dimension 1.  Target sizes: [125, 186].  Tensor sizes: [125, 187]
2025-09-16 01:18:26,845 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:18:26,845 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (186) must match the existing size (187) at non-singleton dimension 1.  Target sizes: [125, 186].  Tensor sizes: [125, 187]
2025-09-16 01:18:26,845 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.211s
2025-09-16 01:18:27,232 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:18:27,232 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.386s
2025-09-16 01:18:27,232 - INFO - bo.run_bo - Recorded observation #5: hparams={'lr': 0.0006550049531232524, 'batch_size': np.int64(256), 'epochs': np.int64(6), 'hidden_size': np.int64(373), 'dropout': 0.4568590869235105}, value=0.0000
2025-09-16 01:18:27,232 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 5: {'lr': 0.0006550049531232524, 'batch_size': np.int64(256), 'epochs': np.int64(6), 'hidden_size': np.int64(373), 'dropout': 0.4568590869235105} -> 0.0000
2025-09-16 01:18:27,233 - INFO - bo.run_bo - BO Trial 6: Using RF surrogate + Expected Improvement
2025-09-16 01:18:27,233 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:18:27,233 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:18:27,233 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:18:27,233 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0006302883671688219, 'batch_size': 128, 'epochs': 24, 'hidden_size': 432, 'dropout': 0.24572406269266053}
2025-09-16 01:18:27,240 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0006302883671688219, 'epochs': 24, 'batch_size': 128, 'hidden_size': 432, 'dropout': 0.24572406269266053}
2025-09-16 01:19:21,957 - INFO - models.training_function_executor - Training completed successfully: {'history': {'train_loss': [0.0839613462984562, 0.03751926109194756, 0.02154820939898491, 0.019816628912463784, 0.016471086375415327, 0.013842474222183227, 0.010957990558817982, 0.008572279013693333, 0.011558902032673358, 0.010788399983197451, 0.005507626618258655, 0.008307952903211117, 0.0056927547529339794, 0.0056842461973428725, 0.0034763553608208896, 0.0027395897805690766, 0.0029227490201592446, 0.00348275831900537, 0.005876679629087448, 0.005925148094072938, 0.007447104489896447, 0.007933684982359409, 0.008545460045337678, 0.006719135135412216], 'val_loss': [0.039189923226833345, 0.024381105855107308, 0.019670237839221956, 0.025123190991580488, 0.010020438633859157, 0.009739610727876425, 0.007827418882399798, 0.008440290123224259, 0.006819216765463352, 0.007538541741669178, 0.010272697947919369, 0.01229281198605895, 0.007326923502609134, 0.007293834203854203, 0.00552166349440813, 0.002985332779586315, 0.007345141470432281, 0.0063451678343117235, 0.006497366409748792, 0.0070894074998795985, 0.02510481532663107, 0.013123699471354484, 0.008622498601675034, 0.01497602979838848], 'val_acc': [0.10400000214576721, 0.2529999911785126, 0.23899999260902405, 0.2709999978542328, 0.25, 0.4449999928474426, 0.42800000309944153, 0.34299999475479126, 0.3580000102519989, 0.39100000262260437, 0.5889999866485596, 0.2759999930858612, 0.3959999978542328, 0.4309999942779541, 0.3569999933242798, 0.5440000295639038, 0.5680000185966492, 0.6980000138282776, 0.5590000152587891, 0.6010000109672546, 0.6079999804496765, 0.5130000114440918, 0.44999998807907104, 0.3199999928474426], 'val_f1_macro': [0.20081365522766514, 0.34182300265230586, 0.3278744755258221, 0.32362076594545275, 0.31863479456982885, 0.4702902117486059, 0.42586885683907283, 0.41263337470846917, 0.3987488961782225, 0.45093239107224015, 0.5374205348943054, 0.33909349622882, 0.42720215421112995, 0.4220249396389013, 0.42483221283172223, 0.5112108626755708, 0.5015019233264526, 0.5809293652741001, 0.490447164798285, 0.5203804023081819, 0.5862080497808894, 0.49544549910536695, 0.44859547259657867, 0.4136154569892036]}, 'best_val_acc': 0.6980000138282776, 'param_count': 3219109, 'model_name': 'TinyECGHybridTransformer', 'training_function_source': 'ai_generated', 'hyperparameters_used': {'lr': 0.0006302883671688219, 'epochs': 24, 'batch_size': 128, 'hidden_size': 432, 'dropout': 0.24572406269266053}}
2025-09-16 01:19:21,958 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) took 54.725s
2025-09-16 01:19:22,354 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:19:22,354 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.396s
2025-09-16 01:19:22,354 - INFO - bo.run_bo - Recorded observation #6: hparams={'lr': 0.0006302883671688219, 'batch_size': np.int64(128), 'epochs': np.int64(24), 'hidden_size': np.int64(432), 'dropout': 0.24572406269266053}, value=0.0000
2025-09-16 01:19:22,355 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 6: {'lr': 0.0006302883671688219, 'batch_size': np.int64(128), 'epochs': np.int64(24), 'hidden_size': np.int64(432), 'dropout': 0.24572406269266053} -> 0.0000
2025-09-16 01:19:22,355 - INFO - bo.run_bo - BO Trial 7: Using RF surrogate + Expected Improvement
2025-09-16 01:19:22,355 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:19:22,355 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:19:22,356 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:19:22,356 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.04222247265603969, 'batch_size': 16, 'epochs': 18, 'hidden_size': 51, 'dropout': 0.25007875594551915}
2025-09-16 01:19:22,363 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.04222247265603969, 'epochs': 18, 'batch_size': 16, 'hidden_size': 51, 'dropout': 0.25007875594551915}
2025-09-16 01:19:22,418 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (25) must match the existing size (26) at non-singleton dimension 1.  Target sizes: [125, 25].  Tensor sizes: [125, 26]
2025-09-16 01:19:22,418 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:19:22,418 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (25) must match the existing size (26) at non-singleton dimension 1.  Target sizes: [125, 25].  Tensor sizes: [125, 26]
2025-09-16 01:19:22,419 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.063s
2025-09-16 01:19:22,804 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:19:22,805 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.386s
2025-09-16 01:19:22,805 - INFO - bo.run_bo - Recorded observation #7: hparams={'lr': 0.04222247265603969, 'batch_size': np.int64(16), 'epochs': np.int64(18), 'hidden_size': np.int64(51), 'dropout': 0.25007875594551915}, value=0.0000
2025-09-16 01:19:22,805 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 7: {'lr': 0.04222247265603969, 'batch_size': np.int64(16), 'epochs': np.int64(18), 'hidden_size': np.int64(51), 'dropout': 0.25007875594551915} -> 0.0000
2025-09-16 01:19:22,805 - INFO - bo.run_bo - BO Trial 8: Using RF surrogate + Expected Improvement
2025-09-16 01:19:22,805 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:19:22,806 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:19:22,806 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:19:22,806 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.015831723490615644, 'batch_size': 32, 'epochs': 12, 'hidden_size': 319, 'dropout': 0.2621266723153076}
2025-09-16 01:19:22,813 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.015831723490615644, 'epochs': 12, 'batch_size': 32, 'hidden_size': 319, 'dropout': 0.2621266723153076}
2025-09-16 01:19:22,886 - ERROR - models.training_function_executor - Training execution failed: The expanded size of the tensor (159) must match the existing size (160) at non-singleton dimension 1.  Target sizes: [125, 159].  Tensor sizes: [125, 160]
2025-09-16 01:19:22,886 - ERROR - models.training_function_executor - Training code: def train_model(X_train, y_train, X_val, y_val, device, **hyperparams):
    import math
    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    from torch.utils.data import ...
2025-09-16 01:19:22,887 - ERROR - models.training_function_executor - BO training objective failed: The expanded size of the tensor (159) must match the existing size (160) at non-singleton dimension 1.  Target sizes: [125, 159].  Tensor sizes: [125, 160]
2025-09-16 01:19:22,887 - INFO - models.training_function_executor - [PROFILE] objective(train+eval) FAILED took 0.081s
2025-09-16 01:19:23,303 - INFO - bo.run_bo - Updated RF surrogate model with observation: 0.0000
2025-09-16 01:19:23,303 - INFO - bo.run_bo - [PROFILE] observe()->tell took 0.416s
2025-09-16 01:19:23,303 - INFO - bo.run_bo - Recorded observation #8: hparams={'lr': 0.015831723490615644, 'batch_size': np.int64(32), 'epochs': np.int64(12), 'hidden_size': np.int64(319), 'dropout': 0.2621266723153076}, value=0.0000
2025-09-16 01:19:23,303 - INFO - evaluation.code_generation_pipeline_orchestrator - BO Trial 8: {'lr': 0.015831723490615644, 'batch_size': np.int64(32), 'epochs': np.int64(12), 'hidden_size': np.int64(319), 'dropout': 0.2621266723153076} -> 0.0000
2025-09-16 01:19:23,304 - INFO - bo.run_bo - BO Trial 9: Using RF surrogate + Expected Improvement
2025-09-16 01:19:23,304 - INFO - bo.run_bo - [PROFILE] suggest() took 0.000s
2025-09-16 01:19:23,304 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 01:19:23,304 - INFO - models.training_function_executor - Executing training function: TinyECGHybridTransformer
2025-09-16 01:19:23,304 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.0004582655140915009, 'batch_size': 8, 'epochs': 22, 'hidden_size': 288, 'dropout': 0.2979985056070939}
2025-09-16 01:19:23,311 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.0004582655140915009, 'epochs': 22, 'batch_size': 8, 'hidden_size': 288, 'dropout': 0.2979985056070939}
