2025-09-16 02:01:26,619 - INFO - __main__ - Logging system initialized successfully
2025-09-16 02:01:26,621 - INFO - __main__ - Found 5 data files: ['mitdb_ecg_sample.csv', 'y.npy', 'X.npy', 'mitdb_ecg_data.npz', 'mitdb_metadata.json']
2025-09-16 02:01:26,621 - INFO - __main__ - Found NPY files, prioritizing them over CSV
2025-09-16 02:01:26,621 - INFO - __main__ - Attempting to load: y.npy
2025-09-16 02:01:26,623 - INFO - __main__ - Attempting to load: X.npy
2025-09-16 02:01:26,924 - INFO - __main__ - Successfully loaded NPY data: X(62352, 1000, 2), y(62352,)
2025-09-16 02:01:27,220 - INFO - __main__ - Starting AI-enhanced data processing with new pipeline flow...
2025-09-16 02:01:27,221 - INFO - __main__ - Starting AI-enhanced training (single attempt, fail fast)
2025-09-16 02:01:27,221 - INFO - __main__ - Flow: Code Generation ‚Üí BO ‚Üí Evaluation
2025-09-16 02:01:27,233 - INFO - __main__ - Data profile: {'data_type': 'numpy_array', 'shape': (62352, 1000, 2), 'dtype': 'float32', 'feature_count': 2, 'sample_count': 62352, 'is_sequence': True, 'is_image': False, 'is_tabular': False, 'has_labels': True, 'label_count': 5, 'sequence_lengths': None, 'channels': None, 'height': None, 'width': None, 'metadata': {}}
2025-09-16 02:01:27,234 - INFO - evaluation.code_generation_pipeline_orchestrator - Code generation pipeline orchestrator initialized (no retry logic)
2025-09-16 02:01:27,234 - INFO - evaluation.code_generation_pipeline_orchestrator - Starting code generation pipeline execution (single attempt, fail fast)
2025-09-16 02:01:27,234 - INFO - evaluation.code_generation_pipeline_orchestrator - Flow: AI Code Generation ‚Üí JSON Storage ‚Üí BO ‚Üí Training Execution ‚Üí Evaluation
2025-09-16 02:01:27,234 - INFO - evaluation.code_generation_pipeline_orchestrator - Creating centralized data splits to prevent data leakage
2025-09-16 02:01:27,234 - INFO - data_splitting - Creating centralized data splits with test_size=0.2, val_size=0.2
2025-09-16 02:01:27,235 - INFO - data_splitting - Input data shape: X=(62352, 1000, 2), y=(62352,)
2025-09-16 02:01:27,236 - INFO - data_splitting - Class distribution: [44897  9551  1201  1239  5464]
2025-09-16 02:01:27,873 - INFO - data_splitting - Computed class weights: {np.int64(0): np.float64(0.27775728256708315), np.int64(1): np.float64(1.3057591623036648), np.int64(2): np.float64(10.37815344603381), np.int64(3): np.float64(10.0640605296343), np.int64(4): np.float64(2.282184729768373)}
2025-09-16 02:01:27,874 - INFO - class_balancing - Class imbalance analysis:
2025-09-16 02:01:27,874 - INFO - class_balancing -   Strategy: severe_imbalance
2025-09-16 02:01:27,874 - INFO - class_balancing -   Imbalance ratio: 37.36
2025-09-16 02:01:27,875 - INFO - class_balancing -   Recommendations: Use weighted loss + weighted sampling, Consider Focal Loss, Evaluate with balanced metrics
2025-09-16 02:01:27,875 - INFO - data_splitting - Final splits - Train: 39904, Val: 9977, Test: 12471
2025-09-16 02:01:27,875 - INFO - data_splitting - Train class distribution: [28733  6112   769   793  3497]
2025-09-16 02:01:27,876 - INFO - data_splitting - Val class distribution: [7184 1529  192  198  874]
2025-09-16 02:01:27,876 - INFO - data_splitting - Test class distribution: [8980 1910  240  248 1093]
2025-09-16 02:01:27,876 - INFO - data_splitting - Recommended balancing strategy: severe_imbalance
2025-09-16 02:01:29,189 - INFO - data_splitting - Computed standardization stats - mean shape: torch.Size([1, 2]), std shape: torch.Size([1, 2])
2025-09-16 02:01:29,193 - INFO - evaluation.code_generation_pipeline_orchestrator - Computed standardization statistics from training data only
2025-09-16 02:01:29,193 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 02:01:29,194 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE EXECUTION (SINGLE ATTEMPT)
2025-09-16 02:01:29,194 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 02:01:29,194 - INFO - evaluation.code_generation_pipeline_orchestrator - ü§ñ STEP 1: AI Training Code Generation
2025-09-16 02:01:29,194 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 02:04:29,566 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Prompt length: 5260 characters
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 02:04:29,749 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 02:05:49,148 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 02:05:49,212 - INFO - models.ai_code_generator - Successfully extracted response content
2025-09-16 02:05:49,212 - INFO - models.ai_code_generator - AI generated training function: ECGTinyTrans
2025-09-16 02:05:49,212 - INFO - models.ai_code_generator - Confidence: 0.90
2025-09-16 02:05:49,212 - INFO - models.ai_code_generator - Reasoning: Implements a lightweight multi-scale CNN front-end (k=7, stride 2) to capture QRS/P/T morphology, followed by a tiny Transformer (2 layers, d_model=64, 4 heads) operating on downsampled tokens (~250) to respect memory constraints at L=1000. This reflects recent findings that hybrid local+global encoders work well for MIT-BIH five-class mapping (AAMI N/S/V/F/Q) while keeping parameters under 256K. Label smoothing and optional class weighting mitigate class imbalance; we report accuracy, macro-F1, and per-class precision/recall, aligning with recommended metrics. Pin memory is used only when tensors reside on CPU, and the loop is kept simple for BO to tune core hyperparameters.
2025-09-16 02:05:49,213 - INFO - models.ai_code_generator - Literature review informed code generation (confidence: 0.77)
2025-09-16 02:05:49,213 - INFO - evaluation.code_generation_pipeline_orchestrator - Generated training function: ECGTinyTrans
2025-09-16 02:05:49,213 - INFO - evaluation.code_generation_pipeline_orchestrator - Reasoning: Implements a lightweight multi-scale CNN front-end (k=7, stride 2) to capture QRS/P/T morphology, followed by a tiny Transformer (2 layers, d_model=64, 4 heads) operating on downsampled tokens (~250) to respect memory constraints at L=1000. This reflects recent findings that hybrid local+global encoders work well for MIT-BIH five-class mapping (AAMI N/S/V/F/Q) while keeping parameters under 256K. Label smoothing and optional class weighting mitigate class imbalance; we report accuracy, macro-F1, and per-class precision/recall, aligning with recommended metrics. Pin memory is used only when tensors reside on CPU, and the loop is kept simple for BO to tune core hyperparameters.
2025-09-16 02:05:49,213 - INFO - evaluation.code_generation_pipeline_orchestrator - BO parameters: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 02:05:49,213 - INFO - evaluation.code_generation_pipeline_orchestrator - Confidence: 0.90
2025-09-16 02:05:49,213 - INFO - evaluation.code_generation_pipeline_orchestrator - üíæ STEP 2: Save Training Function to JSON
2025-09-16 02:05:49,214 - INFO - models.ai_code_generator - Training function saved to: generated_training_functions/training_function_numpy_array_ECGTinyTrans_1757988349.json
2025-09-16 02:05:49,215 - INFO - evaluation.code_generation_pipeline_orchestrator - Training function saved to: generated_training_functions/training_function_numpy_array_ECGTinyTrans_1757988349.json
2025-09-16 02:05:49,221 - INFO - models.training_function_executor - Training function validation passed
2025-09-16 02:05:49,221 - INFO - evaluation.code_generation_pipeline_orchestrator - üîç STEP 3: Bayesian Optimization
2025-09-16 02:05:49,221 - INFO - evaluation.code_generation_pipeline_orchestrator - Running BO for generated training function: ECGTinyTrans
2025-09-16 02:05:49,266 - INFO - evaluation.code_generation_pipeline_orchestrator - BO dataset size: 5000 samples
2025-09-16 02:05:49,266 - INFO - evaluation.code_generation_pipeline_orchestrator - BO will optimize: ['lr', 'batch_size', 'epochs', 'hidden_size', 'dropout']
2025-09-16 02:05:49,267 - INFO - models.training_function_executor - GPU available: NVIDIA H100 NVL
2025-09-16 02:05:49,267 - WARNING - models.training_function_executor - Using provided subset instead of centralized splits - this may cause data leakage
2025-09-16 02:05:49,867 - INFO - bo.run_bo - Using default search space
2025-09-16 02:05:49,870 - INFO - bo.run_bo - Initialized Random Forest Bayesian Optimizer
2025-09-16 02:05:49,879 - INFO - bo.run_bo - Using explicitly provided search space
2025-09-16 02:05:49,881 - INFO - bo.run_bo - Initialized Random Forest Bayesian Optimizer
2025-09-16 02:05:49,885 - INFO - bo.run_bo - BO Trial 1: Initial random exploration
2025-09-16 02:05:49,886 - INFO - bo.run_bo - [PROFILE] suggest() took 0.002s
2025-09-16 02:05:49,886 - INFO - models.training_function_executor - Using device: cuda
2025-09-16 02:05:49,886 - INFO - models.training_function_executor - Executing training function: ECGTinyTrans
2025-09-16 02:05:49,886 - INFO - models.training_function_executor - Hyperparameters: {'lr': 0.01535224694197351, 'batch_size': 16, 'epochs': 10, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 02:05:49,892 - INFO - models.training_function_executor - Starting training with hyperparameters: {'lr': 0.01535224694197351, 'epochs': 10, 'batch_size': 16, 'hidden_size': 204, 'dropout': 0.41779511056254093}
2025-09-16 02:05:54,086 - ERROR - models.training_function_executor - Training execution failed: 'Tensor' object has no attribute 'then_unscale_'
