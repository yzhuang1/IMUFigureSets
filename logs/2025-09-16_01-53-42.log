2025-09-16 01:53:42,023 - INFO - __main__ - Logging system initialized successfully
2025-09-16 01:53:42,026 - INFO - __main__ - Found 5 data files: ['mitdb_ecg_sample.csv', 'y.npy', 'X.npy', 'mitdb_ecg_data.npz', 'mitdb_metadata.json']
2025-09-16 01:53:42,026 - INFO - __main__ - Found NPY files, prioritizing them over CSV
2025-09-16 01:53:42,026 - INFO - __main__ - Attempting to load: y.npy
2025-09-16 01:53:42,027 - INFO - __main__ - Attempting to load: X.npy
2025-09-16 01:53:42,338 - INFO - __main__ - Successfully loaded NPY data: X(62352, 1000, 2), y(62352,)
2025-09-16 01:53:42,676 - INFO - __main__ - Starting AI-enhanced data processing with new pipeline flow...
2025-09-16 01:53:42,677 - INFO - __main__ - Starting AI-enhanced training (single attempt, fail fast)
2025-09-16 01:53:42,677 - INFO - __main__ - Flow: Code Generation â†’ BO â†’ Evaluation
2025-09-16 01:53:42,689 - INFO - __main__ - Data profile: {'data_type': 'numpy_array', 'shape': (62352, 1000, 2), 'dtype': 'float32', 'feature_count': 2, 'sample_count': 62352, 'is_sequence': True, 'is_image': False, 'is_tabular': False, 'has_labels': True, 'label_count': 5, 'sequence_lengths': None, 'channels': None, 'height': None, 'width': None, 'metadata': {}}
2025-09-16 01:53:42,691 - INFO - evaluation.code_generation_pipeline_orchestrator - Code generation pipeline orchestrator initialized (no retry logic)
2025-09-16 01:53:42,691 - INFO - evaluation.code_generation_pipeline_orchestrator - Starting code generation pipeline execution (single attempt, fail fast)
2025-09-16 01:53:42,691 - INFO - evaluation.code_generation_pipeline_orchestrator - Flow: AI Code Generation â†’ JSON Storage â†’ BO â†’ Training Execution â†’ Evaluation
2025-09-16 01:53:42,691 - INFO - evaluation.code_generation_pipeline_orchestrator - Creating centralized data splits to prevent data leakage
2025-09-16 01:53:42,691 - INFO - data_splitting - Creating centralized data splits with test_size=0.2, val_size=0.2
2025-09-16 01:53:42,691 - INFO - data_splitting - Input data shape: X=(62352, 1000, 2), y=(62352,)
2025-09-16 01:53:42,692 - INFO - data_splitting - Class distribution: [44897  9551  1201  1239  5464]
2025-09-16 01:53:43,346 - INFO - data_splitting - Computed class weights: {np.int64(0): np.float64(0.27775728256708315), np.int64(1): np.float64(1.3057591623036648), np.int64(2): np.float64(10.37815344603381), np.int64(3): np.float64(10.0640605296343), np.int64(4): np.float64(2.282184729768373)}
2025-09-16 01:53:43,347 - INFO - class_balancing - Class imbalance analysis:
2025-09-16 01:53:43,347 - INFO - class_balancing -   Strategy: severe_imbalance
2025-09-16 01:53:43,347 - INFO - class_balancing -   Imbalance ratio: 37.36
2025-09-16 01:53:43,348 - INFO - class_balancing -   Recommendations: Use weighted loss + weighted sampling, Consider Focal Loss, Evaluate with balanced metrics
2025-09-16 01:53:43,348 - INFO - data_splitting - Final splits - Train: 39904, Val: 9977, Test: 12471
2025-09-16 01:53:43,348 - INFO - data_splitting - Train class distribution: [28733  6112   769   793  3497]
2025-09-16 01:53:43,349 - INFO - data_splitting - Val class distribution: [7184 1529  192  198  874]
2025-09-16 01:53:43,349 - INFO - data_splitting - Test class distribution: [8980 1910  240  248 1093]
2025-09-16 01:53:43,349 - INFO - data_splitting - Recommended balancing strategy: severe_imbalance
2025-09-16 01:53:44,692 - INFO - data_splitting - Computed standardization stats - mean shape: torch.Size([1, 2]), std shape: torch.Size([1, 2])
2025-09-16 01:53:44,694 - INFO - evaluation.code_generation_pipeline_orchestrator - Computed standardization statistics from training data only
2025-09-16 01:53:44,694 - INFO - evaluation.code_generation_pipeline_orchestrator - 
============================================================
2025-09-16 01:53:44,694 - INFO - evaluation.code_generation_pipeline_orchestrator - PIPELINE EXECUTION (SINGLE ATTEMPT)
2025-09-16 01:53:44,694 - INFO - evaluation.code_generation_pipeline_orchestrator - ============================================================
2025-09-16 01:53:44,695 - INFO - evaluation.code_generation_pipeline_orchestrator - ðŸ¤– STEP 1: AI Training Code Generation
2025-09-16 01:53:44,695 - INFO - models.ai_code_generator - Conducting literature review before code generation...
2025-09-16 01:55:52,741 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:55:52,948 - INFO - models.ai_code_generator - Making API call to gpt-5
2025-09-16 01:55:52,948 - INFO - models.ai_code_generator - Prompt length: 4509 characters
2025-09-16 01:55:52,948 - INFO - models.ai_code_generator - Using API base URL: https://api.openai.com/v1
2025-09-16 01:55:52,948 - INFO - models.ai_code_generator - Calling self.client.responses.create...
2025-09-16 01:55:52,948 - INFO - models.ai_code_generator - Model parameter: gpt-5
2025-09-16 01:55:52,949 - INFO - models.ai_code_generator - Input prompt preview: Generate PyTorch training function for 5-class classification.

Data: numpy_array, shape (1000, 2), 62352 samples

Dataset: MIT-BIH Arrhythmia Database
Source: https://physionet.org/content/mitdb/1.0....
2025-09-16 01:56:58,237 - INFO - httpx - HTTP Request: POST https://api.openai.com/v1/responses "HTTP/1.1 200 OK"
2025-09-16 01:56:58,295 - INFO - models.ai_code_generator - API call completed successfully
2025-09-16 01:56:58,295 - INFO - models.ai_code_generator - Response type: <class 'openai.types.responses.response.Response'>
2025-09-16 01:56:58,295 - INFO - models.ai_code_generator - Response attributes: ['__abstractmethods__', '__annotations__', '__class__', '__class_getitem__', '__class_vars__', '__copy__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__fields__', '__fields_set__', '__format__', '__ge__', '__get_pydantic_core_schema__', '__get_pydantic_json_schema__', '__getattr__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pretty__', '__private_attributes__', '__pydantic_complete__', '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__', '__pydantic_decorators__', '__pydantic_extra__', '__pydantic_fields__', '__pydantic_fields_set__', '__pydantic_generic_metadata__', '__pydantic_init_subclass__', '__pydantic_parent_namespace__', '__pydantic_post_init__', '__pydantic_private__', '__pydantic_root_model__', '__pydantic_serializer__', '__pydantic_setattr_handlers__', '__pydantic_validator__', '__reduce__', '__reduce_ex__', '__replace__', '__repr__', '__repr_args__', '__repr_name__', '__repr_recursion__', '__repr_str__', '__rich_repr__', '__setattr__', '__setstate__', '__signature__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_calculate_keys', '_copy_and_set_values', '_get_value', '_iter', '_request_id', '_setattr_handler', 'background', 'construct', 'conversation', 'copy', 'created_at', 'dict', 'error', 'from_orm', 'id', 'incomplete_details', 'instructions', 'json', 'max_output_tokens', 'max_tool_calls', 'metadata', 'model', 'model_computed_fields', 'model_config', 'model_construct', 'model_copy', 'model_dump', 'model_dump_json', 'model_extra', 'model_fields', 'model_fields_set', 'model_json_schema', 'model_parametrized_name', 'model_post_init', 'model_rebuild', 'model_validate', 'model_validate_json', 'model_validate_strings', 'object', 'output', 'output_text', 'parallel_tool_calls', 'parse_file', 'parse_obj', 'parse_raw', 'previous_response_id', 'prompt', 'prompt_cache_key', 'reasoning', 'safety_identifier', 'schema', 'schema_json', 'service_tier', 'status', 'temperature', 'text', 'to_dict', 'to_json', 'tool_choice', 'tools', 'top_logprobs', 'top_p', 'truncation', 'update_forward_refs', 'usage', 'user', 'validate']
